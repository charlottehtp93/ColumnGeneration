import pickle
import random
import copy
#basic data
options = ['active','standby','being repaired']
failureModes = [['rotor','bearing','Gearbox','LubeOil','motorBearing','motor'],#MAC
['generalFailure'],#PPF
['rotor','bearing','Gearbox','LubeOil','motorBearing','motor'],#BAC
['generalFailure'],#LO2 PUMP
['rotor','bearing','Gearbox','LubeOil']]
'''
parameters = [{'lambdas':[[0.00018265,0.00027397,0.00010959,0.00054795,0.00018265,0.00010969]
,[0.00019265,0.00028397,0.00011959,0.00055795,0.00019265,0.0001196]],
'mus':[[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222]]},#MAC 
{'lambdas':[[0.00018265],[0.00019265],[0.00020265]],'mus':[[0.2],[0.2],[0.2]]},#PPF
{'lambdas':[[0.00018265,0.00027397,0.00010959,0.00054795,0.00018265,0.00010969]
,[0.00019265,0.00028397,0.00011959,0.00055795,0.00019265,0.0001196]],
'mus':[[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222]]},#BAC
{'lambdas':[[0.00054795],[0.00055795],[0.00056795]],'mus':[[2.4],[2.4],[2.4]]}]#LO2 PUMP
unitNum = [2,3,2,3]
cap = [[1250,1200],[520,500,480],[1000,950],[150,145,140]]


parameters = [{'lambdas':[[0.00018265,0.00027397,0.00010959,0.00054795,0.00018265,0.00010969]
,[0.00019265,0.00028397,0.00011959,0.00055795,0.00019265,0.00011969],
[0.00020265,0.00029397,0.00012959,0.00056795,0.00020265,0.00012969]],
'mus':[[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222]]},#MAC 
{'lambdas':[[0.00018265],[0.00019265],[0.00020265],[0.00021265]],'mus':[[0.2],[0.2],[0.2],[0.2]]},#PPF
{'lambdas':[[0.00018265,0.00027397,0.00010959,0.00054795,0.00018265,0.00010969]
,[0.00019265,0.00028397,0.00011959,0.00055795,0.00019265,0.0001196],
[0.00020265,0.00029397,0.00012959,0.00056795,0.00020265,0.00012969]],
'mus':[[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222]]},#BAC
{'lambdas':[[0.00054795],[0.00055795],[0.00056795]],'mus':[[2.4],[2.4],[2.4]]}]#LO2 PUMP
unitNum = [3,4,3,3]
#cap = [[1250,1200,1150],[520,500,480,460],[1000,950,900],[150,145,140]]
cap = [[1250,1240,1230],[520,515,510,505],[1000,990,980],[150,145,140]]
'''

parameters = [{'lambdas':[[0.00018265,0.00027397,0.00010959,0.00054795,0.00018265,0.00010969],
[0.00018275,0.00027407,0.00010969,0.00054805,0.00018275,0.00010979],
[0.00018285,0.00027417,0.00010979,0.00054815,0.00018285,0.00010989]],
'mus':[[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222]]},#MAC 
{'lambdas':[[0.00018265],[0.00018275],[0.00018285],[0.00018295]],'mus':[[0.2],[0.2],[0.2],[0.2]]},#PPF
{'lambdas':[[0.00018265,0.00027397,0.00010959,0.00054795,0.00018265,0.00010969],
[0.00018275,0.00027407,0.00010969,0.00054805,0.00018275,0.00010979],
[0.00018285,0.00027417,0.00010979,0.00054815,0.00018285,0.00010989]],
'mus':[[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222],[0.1,0.2,0.143,3,0.5,0.0222]]},#BAC
#{'lambdas':[[0.00054795],[0.00054805],[0.00054815]],'mus':[[2.4],[2.4],[2.4]]}]#LO2 PUMP
{'lambdas':[[0.001644],[0.001654],[0.001664]],'mus':[[1.2],[1.2],[1.2]]}]#LO2 PUMP
#{'lambdas':[[0.0054795],[0.0054805],[0.0054815]],'mus':[[2.4],[2.4],[2.4]]}]#LO2 PUMP

#4,5,4,4-not solvable by original formulation
'''
parametersInverse = [{'MTBF':[[5000, 3650, 7000, 1500, 5000, 7000],[4000, 4000, 4000, 1500, 5000, 6000],[5000, 4000, 5000, 1000, 6000, 6000],[5000, 3650, 5000, 1500, 6000, 7000]],
'MTTR':[[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50]]}, 
{'MTBF':[[3650],[3650],[3650],[3650],[3650]],'MTTR':[[4],[4],[4],[4],[4]]},
{'MTBF':[[5000, 3650, 7000, 1500, 5000, 7000],[4000, 4000, 4000, 1500, 5000, 6000],[5000, 4000, 5000, 1000, 6000, 6000],[5000, 3650, 5000, 1500, 6000, 7000]],
'MTTR':[[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50]]},
{'MTBF':[[3650],[3650],[3650],[3650]],'MTTR':[[4],[4],[4],[4]]},]
'''
'''
#3,4,3,3
parametersInverse = [{'MTBF':[[5000, 3650, 7000, 1500, 5000, 7000]
,[5000, 3650, 5000, 1500, 6000, 6000]
,[4000, 4000, 4000, 1500, 5000, 6000]],
'MTTR':[[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50]]}, 
{'MTBF':[[3650],[3650],[3650],[3650]],'MTTR':[[4],[4],[4],[4]]},
{'MTBF':[[5000, 3650, 7000, 1500, 5000, 7000]
,[5000, 3650, 5000, 1500, 6000, 7000]
,[4000, 4000, 4000, 1500, 5000, 6000]],
'MTTR':[[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50],[10, 5, 7, 0.3, 2, 50]]},
{'MTBF':[[3650],[3650],[3650]],'MTTR':[[4],[4],[4]]}]
#perturb
scale_l=5**(-1)
scale_m=5
for stage in parametersInverse:
	MTBF = stage['MTBF']
	MTTR= stage['MTTR']
	stage['MTBF'] = [[failureMode*scale_l for failureMode in unit] for unit in MTBF]
	stage['MTTR'] = [[failureMode*scale_m for failureMode in unit] for unit in MTTR]
parameters = list()
for stage in parametersInverse:
	MTBF = stage['MTBF']
	MTTR = stage['MTTR']
	stage = dict()
	stage['lambdas'] = [[failureMode**(-1) for failureMode in unit] for unit in MTBF]
	stage['mus'] = [[failureMode**(-1) for failureMode in unit] for unit in MTTR]
	parameters.append(stage)


print(parametersInverse)'''
print(parameters)
#unitNum = [3,4,3,3]
#cap = [[1250,1200,1150,1200],[520,519,518,517,516],[1000,950,900,980],[150,149,148,147]]
#cap = [[1250,1240,1200],[520,519,518,517],[1000,980,950],[150,149,148]]
#cap = [[1250,1250,1250,1250],[520,520,520,520,520],[1000,1000,1000,1000],[150,150,150,150]]
#cap = [[1250,1249,1248],[520,519,518,517],[1000,999,998],[150,149,148]]
cap = [[1250,1250,1250],[520,520,520,520],[1000,1000,1000],[150,150,150]]
#cap = [[1250,1249,1248,1247],[520,519,518,517,516],[1000,999,998,997],[150,149,148,147]]

V_LO2 = [100, 400, 700, 1000, 1500]
V_LN2 = [100, 400, 700, 1000, 1500]
#c_LO2 = [4*v**0.6 for v in V_LO2]
#c_LN2 = [3.5*v**0.6 for v in V_LN2]
c_LO2 = [55, 237, 427, 621, 951]
c_LN2 = [50, 215, 388, 565, 864]

pn_LO2 = 2000
pn_LN2 = 2000
dec_LO2 = 48
dec_LN2 = 60



rawData = {'parameters':tuple(parameters), 'V_LO2': tuple(V_LO2), 'V_LN2': tuple(V_LN2), 
'dec_LO2': dec_LO2, 'dec_LN2': dec_LN2, 'pn_LO2': pn_LO2, 'pn_LN2': pn_LN2, 
'c_LO2': tuple(c_LO2), 'c_LN2': tuple(c_LN2), 'cap': tuple(cap)}

with open('rawData_3433_0.p', 'wb') as fp: 
	pickle.dump(rawData, fp, protocol=pickle.HIGHEST_PROTOCOL)



